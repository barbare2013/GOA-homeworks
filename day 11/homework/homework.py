# თეორია:
# 1)კომენტარების სახით ახსენით pseudocode
# pseudokode არ არის რეალური კოდი. მას არ მკაცრი წესები, რაც მუშაობას უფრო მარტივს ხდის. ფსევდოკოდი არის კოდის აღწერილობა სიტყვიერად.
# ასევე ის უნდა წააგავდეს პროგრამირების იმ ენის კოდებს რომელსაც ფსევდოკოდის სახით ვწერთ.

# 2)კომენტარების სახით ახსენით რაზეა დამოკიდებული პროგრამირების ენის სიჩქარე, რატომაა პითონი ნელი პროგრამირების ენა
# პროგრამირების ენის სიჩქარე დამოკიდებულია იმაზე თუ რამდენად ახლოსაა ის binary code-თან.
# პითონი იმიტომ არის ნელი პროგრამირების ენა რომ ის ძალიან დაშორებულია binary code-თან.

# 3)კომენატრების სახით ჩამოწერეთ დღესდღეობით ყველაზე ადვილი პროგრამირების ენები
# პროგრამირების ყველაზე მარტივი ენებია python და scratch.

# 4)კომენტარების სახით ჩამოწერეთ პროგრამირების ენების ხე, პითონი რითი შეიქმნა ის როგორ შეიქმნა და ა.შ
# python -> perl -> Objective-C -> c++ -> Ada -> prolog -> smalltalk -> c -> pascal ->
# simula -> BASIC ->ALGOL -> COBOL -> lisp -> Fortran -> Assembly -> binary.

# 5)კომენტარების სახით ახსენით, რა არის პროგრმაირების ენის მთავარი არსი, და რისთვისაა ცუდი და რისთვის კარგი scratch
# პროგრამირების მთავარი არსი არის ის რომ ადამიანებს გაუმარტივდეთ ცხოვრება, განახორციელონ იდეები, და სხვა...
# scratch კარგი არის იმიტომ რომ ყველას შეუძლია იმუშაოს მასში, არ არის საჭირო პროგრამირების ცოდნა, ასევე არ გიწევს რთული გოდების წერა და აშშ...
# scratch ცუდი არის იმიტომ რომ არ გიწევს შრომა, შეგიძლია შექმნა მხოლოდ თამაშები და არა სერიოზული საიტები, დაშორებულია პროგრამირებასთან...


#  პრეფიქსი „ფსევდო“ ნიშნავს „არანამდვილს; ყალბს“. თუმცა, ფსევდოკოდს უარყოფითი კონოტაცია არ აქვს. ეს უბრალოდ ნიშნავს,
#  რომ ის არ არის რეალური კოდი. პროგრამირების ენებს აქვთ მკაცრი სინტაქსი, რომელიც უნდა დაიცვათ. თუ ენის წესები დაირღვება,
#  სინტაქსური შეცდომები ხელს შეუშლის კომპილაციას/ინტერპრეტაციას. ფსევდოკოდს არ აქვს ასეთი სინტაქსური მოთხოვნა, რაც მას სასარგებლო
#  ინსტრუმენტად აქცევს შემუშავების პროცესის დასაწყებად ან მის დამატებად.
#  ფსევდოკოდის ერთ-ერთი მთავარი უპირატესობა ის არის, რომ ის დეველოპერს საშუალებას აძლევს სწრაფად დაიმახსოვროს იდეები და იყოს
#  ძალიან პროდუქტიული პროგრამის ოპერაციების აღწერისას. ფსევდოკოდის წერისას, პროგრამისტს შეუძლია პროგრესის დაფიქსირება გაცილებით
#  სწრაფად, ვიდრე ენის სინტაქსის წესების დაცვაზე ზრუნვის შემთხვევაში. მას ასევე შეუძლია გამოავლინოს პრობლემები და ხარვეზები,
#  რომლებიც ფსევდოკოდის ეტაპამდე არ აღმოჩენილა.
#  ფსევდოკოდს მკაცრი წესები არ აქვს. დეველოპერები კოდს აღწერენ სტანდარტული ენის მსგავსი გამოსახულებების გამოყენებით.
#  მიუხედავად იმისა, რომ აუცილებელი არ არის, ფსევდოკოდის დაწერა ხშირად ხდება სამიზნე ენის გათვალისწინებით. მაგალითად,
#  C++ პროგრამებისთვის დაწერილი ფსევდოკოდი, სავარაუდოდ, სულ მცირე, ოდნავ მაინც, რეალურ C++ კოდს წააგავს. მაშინ როდესაც Python-ისთვის
#  დაწერილ ფსევდოკოდს შეიძლება ჰქონდეს Python-ის პროგრამირების ენის ზოგიერთი მახასიათებელი.
#  ქვემოთ მოცემულ მაგალითში, კურსის ამ ეტაპზე დამწყებთათვის, ჩვენ ვვარაუდობთ Python-ის სინტაქსის მინიმალურ ცოდნას. ამიტომ,
#  ჩვენი ფსევდოკოდი Python-ის კოდის ნაცვლად უფრო „ინგლისური“ იქნება. გამოცდილების მიღების შემდეგ, ფსევდოკოდი შეიძლება
#  სულ უფრო და უფრო დაემსგავსოს სამიზნე ენას იმ დონემდე, რომ თითქმის თავად კოდი გახდეს.
#  მოდით განვიხილოთ პროგრამირების ამოცანის მაგალითი და ვნახოთ, როგორ გამოიყურება ფსევდოკოდი.
#  დავუშვათ, რომ ვწერთ აპლიკაციას, რომელიც გამოთვლის მოცემულ დროში გაყიდული მარწყვის პინტების საერთო რაოდენობას.
#  ფსევდოკოდი შეიძლება დაახლოებით ასე გამოიყურებოდეს, როგორც ქვემოთ არის ნაჩვენები.